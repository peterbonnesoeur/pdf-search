from typing import List
from haystack.document_stores import InMemoryDocumentStore
from haystack.nodes import TfidfRetriever, FARMReader
from haystack.pipelines import ExtractiveQAPipeline

def build_document_store(docs:List[str]) -> InMemoryDocumentStore:
    """
    Given a list of documents, return an instance of InMemoryDocumentStore
    containing the documents.

    Args:
    docs (List[str]): list of documents

    Returns:
    InMemoryDocumentStore: In-memory document store
    """
    document_store = InMemoryDocumentStore()
    document_store.write_documents(docs)
    return document_store

def build_retriever(document_store:InMemoryDocumentStore) -> TfidfRetriever:
    """
    Given an InMemoryDocumentStore, return an instance of TfidfRetriever.

    Args:
    document_store (InMemoryDocumentStore): In-memory document store

    Returns:
    TfidfRetriever: Tf-idf retriever
    """
    retriever = TfidfRetriever(document_store=document_store)
    return retriever

def build_reader() -> FARMReader:
    """
    Returns an instance of FARMReader.

    Returns:
    FARMReader: FARM Reader
    """
    reader = FARMReader(model_name_or_path="deepset/roberta-base-squad2", use_gpu=False)
    return reader

def build_pipeline(book:List[str]) -> ExtractiveQAPipeline:
    """
    Given a list of documents, returns an instance of ExtractiveQAPipeline
    which contains a reader, a retriever, and the documents.

    Args:
    book (List[str]): list of documents

    Returns:
    ExtractiveQAPipeline: extractive QA pipeline
    """
    document_store = build_document_store(book)
    retriever = build_retriever(document_store)
    reader = build_reader()
    pipeline = ExtractiveQAPipeline(reader, retriever)
    return pipeline

def query(query:str, pipeline:ExtractiveQAPipeline) -> dict:
    """
    Given a query and an instance of ExtractiveQAPipeline, returns the prediction
    generated by the pipeline.

    Args:
    query (str): query to be passed to the pipeline
    pipeline (ExtractiveQAPipeline): extractive QA pipeline

    Returns:
    dict: prediction generated by the pipeline
    """
    prediction = pipeline.run(query, params={"Retriever": {"top_k": 10}, "Reader": {"top_k": 5}})
    return prediction
